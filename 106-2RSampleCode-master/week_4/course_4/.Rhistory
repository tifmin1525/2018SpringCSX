group_by(sarea) %>%
summarise(空位數 = sum(tot - sbi), 平均停車格 = mean(tot), 目前車輛數 = sum(sbi)) %>%
arrange(desc(空位數))
a <- UBF %>%
filter(act == 1) %>%
select(tot, sbi, sna, lng, lat) %>%
group_by(sna) %>%
summarise(空位數 = (tot - sbi), 停車格 = (tot), 目前車輛數 = (sbi), 空位率 = 空位數/停車格) %>%
arrange(desc(空位率))
a <- json$parkingLots %>%
select(areaId,totalSpace, surplusSpace, wgsX, wgsY) %>%
group_by(areaId) %>%
mutate(emp = surplusSpace, tot = totalSpace, cars = (totalSpace-surplusSpace), Vacancy = emp/tot, lat = wgsY, lng = wgsX) %>%
arrange(desc(Vacancy))
map <- get_map(location = c(lon = 121.55, lon = 25.07), zoom = 10, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.55, lon = 25.07), zoom = 10, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
map <- get_map(location = c(lon = 121.40, lon = 25.00), zoom = 13, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.40, lon = 25.00), zoom = 13, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.40, lon = 25.00), zoom = 13, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
map <- get_map(location = c(lon = 121.40, lon = 25.00), zoom = 10, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.40, lon = 25.00), zoom = 10, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
summary(json$parkingLots)
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 12, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 12, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 12, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 12, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11.5, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(2)) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(4)) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(1) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(2) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(2) #彩色bar
2
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(2)) #彩色bar
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
library(jsonlite)
library(magrittr)
library(dplyr)
library(httr)
json <- jsonlite::fromJSON("https://data.tycg.gov.tw/opendata/datalist/datasetMeta/download?id=f4cc0b12-86ac-40f9-8745-885bddc18f79&rid=0daad6e6-0632-44f5-bd25-5e1de1e9146f")
json$parkingLots$surplusSpace <- as.numeric(json$parkingLots$surplusSpace)
json$parkingLots <- json$parkingLots %>%
filter(surplusSpace !="NA")
library("ggmap") # 畫圖
a <- json$parkingLots %>%
select(areaId,totalSpace, surplusSpace, wgsX, wgsY) %>%
group_by(areaId) %>%
mutate(emp = surplusSpace, tot = totalSpace, cars = (totalSpace-surplusSpace), Vacancy = emp/tot, lat = wgsY, lng = wgsX) %>%
arrange(desc(Vacancy))
map <- get_map(location = c(lon = 121.30, lon = 24.96), zoom = 11, language = "zh-TW", maptype = "roadmap") #設定圖
ggmap(map, darken = c(0.1, "white")) + geom_point(aes(x = lng, y = lat, col = Vacancy), data = a) +
geom_point() +
scale_colour_gradientn(colours=rainbow(3)) #彩色bar
a
library(leaflet)
library(jsonlite)
student.df <- data.frame(
lng = 121.536823 + rnorm(5)/1000,
lat = 25.018624 + rnorm(5)/1000,
student.id = c("Eric", "Pat", "Billy", "Paul", "Kobe"),
student.grade = c(70, 80, 70, 90, 95),
student.class = c("A", "B", "A", "C", "B")
)
SetColor <- function(grade) {
return(ifelse(grade > 75, "blue", "red"))
}
ntuGeoJson <- jsonlite::fromJSON("./ntu.geojson")
setwd()
file.choose()
setwd
setwd("/Users/good.eddy/Documents/GitHub/2018SpringCSX/106-2RSampleCode-master/week_4/course_4/")
ntuGeoJson <- jsonlite::fromJSON("./ntu.geojson")
ntuGeoJson
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
ntuGeoJson <- jsonlite::fromJSON("./ntu.geojson")
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
ntuGeoJson
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
ntuGeoJson
ntuGeoJson <- jsonlite::fromJSON("./ntu.geojson")
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
ntuGeoJson
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
file.choose()
ntuGeoJson <- jsonlite::fromJSON("/Volumes/BaseQi/final/geojson-map-china/china.json")
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
ntuGeoJson
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 16) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
lng = 121.537,
lat = 25.018,
zoom = 12) %>% # Set the view of map
addCircleMarkers(
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 12) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
map <- leaflet() %>%
addTiles() %>% # Add default OpenStreetMap map tiles
#addGeoJSON(ntuGeoJson) %>% # Add ntuGeoJson layer
addMarkers(
lng = 121.536823,
lat = 25.018624,
popup = "where we are!") %>% # Add example marker
setView(
lng = 121.537,
lat = 25.018,
zoom = 12) %>% # Set the view of map
addCircleMarkers(
data = student.df,
lng = ~lng,
lat = ~lat,
label = ~(paste(student.id, ", grade=> ", student.grade)),
radius = ~(student.grade/10),
color = ~SetColor(student.grade),
fill = T) # Add circle markers with student.df
map
install.packages("davtools")
install.packages("devtools")
install.packages("twitteR")
install.packages("data.table")
install.packages("data.table")
consumerKey <- "iYAX3lwWTFEWN5wdcenZOqbKi"
consumerSecret <- "4W8kPTzD4pvoAPnLjtb20Jty3lzYl5z0RsxWBJ4G4uuiItNWaq"
accessToken <- "3318803712-61lBVlxpSNAz6ctBMGcY86KeAbN2uQz0eZYx8X1"
accessSecret <- "g3WQY0mEAcbcvkrQMvgQiU45voGTVaBlSH3KgTSJBmOZ7"
options(httr_oauth_cache=T) # This will enable the use of a local file to cache OAuth access credentials between R sessions.
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
library(devtools)
library(twitteR)
library(data.table)
options(httr_oauth_cache=T) # This will enable the use of a local file to cache OAuth access credentials between R sessions.
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
tweets <- searchTwitter('#airbnb',
n=50,
since = '2018-03-13',
until = '2018-03-18')
tweets.list <- twListToDF(tweets)
tweets.list
names.list <-  rbindlist(lapply(tweets.list$screenName,
as.data.frame))
names(names.list)[1] <- "Name" #CHANGE THE COLUMNS NAME
alldata <- data.frame()
for (i in 1:3){ #Cursor
tryCatch(
{
# get name from '#_______' users list
tag.user <- names.list$Name[i]
# print query location
print(paste(i, tag.user))
# get User's twitter account
tag.user.account <- getUser(tag.user)
# get account's friend (if accessible)
user.friends <- tag.user.account$getFriends(retryOnRateLimit=180)
print(length(user.friends))
# limit
if (length(user.friends) < 3000){
# Make data.table of user's friends data list.
friends.df <- rbindlist(lapply(user.friends, as.data.frame))
# Get the only friends name column.
friends.name.df <- data.frame(tempname=c(friends.df$name))
# Change column name
colname <- toString(tag.user)
setnames(friends.name.df, c(colname))
# Write table
write.table(friends.name.df, file = paste(colname, ".csv"))
# bind data in the same data.frame
alldata <- rbind.fill(alldata, friends.name.df)
#data <- cbind(list(data, friends.name.df))
}
else{
print(paste(i, tag.user, "<== friends count > 500"))
}
},
warning = function(w){},
error = function(e){
#ERROR (need to store it?)
print(paste("ERROR", tag.user))
},
finally = {
print("End Try&Catch")
})
i = i+1
}
install.packages("leafletCN")
install.packages("rgeos")
library(jsonlite)
file.choose()
geodata <- fromJSON("/Volumes/BaseQi/final/geojson-map-china/china.json")
geodata
geodata <- fromJSON("/Volumes/BaseQi/final/geojson-map-china/china.json",flatten = T)
geo
geodata
geodata$type
geodata
geodata$features$properties.cp
geodata$features$properties.name
knitr::opts_chunk$set(echo = TRUE)
library("rjson")
json_file <- "/Users/good.eddy/Downloads/戰後政治案件及受難者.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
df <- json_data$data #讀值
json_file <- lapply(df, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})  #收起來
#json_file <- data.frame(lapply(json_file, as.character), stringsAsFactors=FALSE)
UBdata <- do.call("rbind",json_file) #壓起來
UBF <- as.data.frame(UBdata) #換型態
library(dplyr)
UBF %>% mutate_if(is.factor, as.character) -> UBF #因為data.frame裡面都是factor, 所以先換成char
library(dplyr)
library(tidyverse)
library(gutenbergr)
library(jiebaR)
library(jiebaRD)
#gsub("，\\D\\D\\D","",UBF[5][1])
df <- data.frame(UBF)
df[,5] <- gsub("，\\D\\D\\D", "", as.matrix(df[,5]))
df[,5] <- gsub("，\\D\\D", "", as.matrix(df[,5]))
df[,5] <- gsub("，\\D", "", as.matrix(df[,5]))
df[,5] <- gsub("，", "", as.matrix(df[,5]))
df[,5] <- gsub("\\n台灣", "", as.matrix(df[,5]))
df[,5] <- gsub("市", "", as.matrix(df[,5]))
df[,5] <- gsub("越南國", "越南", as.matrix(df[,5]))
df[,5] <- gsub("日本國", "日本", as.matrix(df[,5]))
df[,5] <- gsub("俄羅斯國", "俄羅斯", as.matrix(df[,5]))
df[,5] <- gsub("台灣北", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("縣", "", as.matrix(df[,5]))
df[,5] <- gsub("臺灣", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("福逼", "福建", as.matrix(df[,5]))
df[,5] <- gsub(",", "", as.matrix(df[,5]))
df[,5] <- gsub("台彎", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("、\\D\\D\\D", "", as.matrix(df[,5]))
df[,5] <- gsub("人", "", as.matrix(df[,5]))
df[,5] <- gsub("台灣後", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("羅東鎮成功里", "", as.matrix(df[,5]))
df[,5] <- gsub("台灣台北縣", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("哈爾", "哈爾賓", as.matrix(df[,5]))
df[,5] <- gsub("安黴", "安徽", as.matrix(df[,5]))
df[,5] <- gsub("廣西蒼梧", "廣西", as.matrix(df[,5]))
df[,5] <- gsub("台灣山", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("台灣港", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("台北", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("台北縣", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("台灣壇", "台灣", as.matrix(df[,5]))
df[,5] <- gsub("。台中縣", "", as.matrix(df[,5]))
df[,5] <- gsub("．台北縣", "", as.matrix(df[,5]))
df[,5] <- gsub(", 含山縣", "", as.matrix(df[,5]))
df[,5] <- gsub("台灣台灣", "台灣", as.matrix(df[,5]))
df$V5 <- as.character(df$V5)
UBF_Freq <- freq(df$V5)
df5<- UBF_Freq %>%
arrange(desc(freq)) %>%
head(15)
library(showtext)
library(ggplot2)
#ggplot(df5, aes(x=reorder(char, -freq), y= freq)) +
#  geom_bar(stat="identity") +
#  ggtitle("籍貫") +
#  ylab("人") +
#  xlab("地") +
#  theme(text= element_text(family="wqy-microhei"))
#                )
dfmap <- data.frame(place=df5$char,
peo=df5$freq
)
#準備畫布
ggplot(data=dfmap) +
# 先畫bar plot
geom_bar(aes(x=factor(1),
y=peo,
fill=place),
stat = "identity"
) +
theme(text=element_text(family='wqy-microhei', size=14)) +
# 再沿著Y，轉軸成圓餅圖
coord_polar("y", start=0)
df
df$V5
df5
df5<- UBF_Freq %>%
arrange(desc(freq))
df5
write(df5, file = "df5.txt")
write(df5, file = "df5.txt")
write_csv(df5, file = "df5.csv")
write_csv(df5, file = "df5")
df5
write(df5,file = df)
dat <- paste(Sys.Date(),".txt",sep = "")
write(df5,file = dat)
df5
write_file(df5)
write.table(df5, file = "test.CSV", sep = ",")
getwd
getwd()
write.table(df5, file = "test.CSV", sep = ",", Encoding("UTF-8"))
write.table(df5, file = "test.CSV", sep = ",", Encoding(UTF-8))
