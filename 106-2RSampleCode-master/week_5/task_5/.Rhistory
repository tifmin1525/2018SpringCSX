return(text)
}
key <- "westbrook"
rawtext <- NULL
for(i in 1:length(data)){
rawtext <- getrawrext(data[i],key)
}
rawtext
install.packages("e1071")
library(e1071)
data(iris)
x <- subset(iris, select = -Species)
y <- iris$Species
x
y
model <- svm(Species ~ ., data = iris)
model
pred_result <- predict(model, x)
pred_result
table(pred_result, y)
plot(model, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4),color.palette = terrain.colors)
plot(model, iris, Sepal.Width ~ Petal.Width,
slice = list(Sepal.Length = 3, Petal.Length = 4),color.palette = terrain.colors)
install.packages("caTools")
iris
library(caTools)
dataset <- read.csv('./dataset/GamePoints_Data.csv')
file.choose()
dataset <- read.csv("/Users/good.eddy/Documents/GitHub/2018SpringCSX/106-2RSampleCode-master/week_7/course_7/dataset/GamePoints_Data.csv")
dataset
set.seed(123)
split <- sample.split(dataset$GamePoints, SplitRatio = 0.8)
help("subset")
training_set <- subset(dataset, split == TRUE)
training_set
test_set <- subset(dataset, split == FALSE)
?lm
regressor <- lm(formula = GamePoints ~ PlayingHours,
data = training_set)
regressor
y_pred <- predict(regressor, newdata = test_set)
y_pred
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$PlayingHours, y = training_set$GamePoints),
colour = 'red') +
geom_line(aes(x = training_set$PlayingHours, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('GamePoints vs PlayingHours (Training set)') +
xlab('Hours of playing') +
ylab('GamePoints')
file.choose()
raw <- read.csv("/Users/good.eddy/Documents/GitHub/106-2RSampleCode/week_8/task_8/titanicTrain.csv")
ra
raw
View(raw)
model <- svm(Species ~ ., data = iris)
pred_result <- predict(model, x)
model
pred_result
summary(raw)
raw %?%
1
raw %>% filter(survived == 0) %>%
group_by(boat)
a <- raw %>% filter(survived == 0) %>%
+ group_by(boat)
a <- raw %>% filter(survived == 0) %>% group_by(boat)
View(a)
a <- raw %>% filter(boat == "A") %>% group_by(boat)
freq(raw$boat)
freq(as.character(raw$boat))
as.integer(2**0.5)
as.integer(7**0.5)
as.integer(9**0.5)
as.integer(10**0.5)
?break
count <- 0
for(i in 2:length(iris$Petal.Width)){
for(j in 2:as.integer(i**0.5)){
if(i %% j == 0){
break()
} else {
count = count + 1
}
}
if (count == as.integer(i**0.5) - 1){
print(iris$Petal.Width[i])
}
}
count <- 0
for(i in 2:length(iris$Petal.Width)){
for(j in 2:as.integer(i**0.5)){
if(i %% j == 0){
break()
} else {
count = count + 1
}
}
if (count == as.integer(i**0.5) - 1){
print(iris$Petal.Width[i])
}
}
iris$Petal.Width
for(i in 2:length(iris$Petal.Width)){
count <- 0
for(j in 2:as.integer(i**0.5)){
if(i %% j == 0){
break()
} else {
count = count + 1
}
}
if (count == as.integer(i**0.5) - 1){
print(iris$Petal.Width[i])
}
}
print(iris[i])
for(i in 2:length(iris$Petal.Width)){
count <- 0
for(j in 2:as.integer(i**0.5)){
if(i %% j == 0){
break()
} else {
count = count + 1
}
}
if (count == as.integer(i**0.5) - 1){
print(iris[i])
}
}
print(iris[,i])
iris[,1]
iris[1,]
print(iris[i,])
for(i in 2:length(iris$Petal.Width)){
count <- 0
for(j in 2:as.integer(i**0.5)){
if(i %% j == 0){
break()
} else {
count = count + 1
}
}
if (count == as.integer(i**0.5) - 1){
print(iris[i,])
}
}
x <- matrix(NA, 5, 5)
diag(x) <- 0
x[1,2] <- 30; x[1,3] <- 10
x[2,4] <- 70; x[2,5] <- 40
x[3,4] <- 50; x[3,5] <- 20
x[4,5] <- 60
x[5,4] <- 10
print(x)
z <- allShortestPaths(x)
print(z)
data(cats, package = "MASS")
m <- svm(Sex~., data = cats)
plot(m, cats)
arning
warning()
warnings()
data(iris)
m2 <- svm(Species~., data = iris)
plot(m2, iris, Petal.Width ~ Petal.Length,
slice = list(Sepal.Width = 3, Sepal.Length = 4))
plot(m, cats, svSymbol = 1, dataSymbol = 2, symbolPalette = rainbow(4),
color.palette = terrain.colors)
?svm
model <- svm(Species ~ ., data = iris)
pred_result <- predict(model, x)
x <- subset(iris, select = -Species)
pred_result <- predict(model, x)
table(pred_result, y)
pred_result
class(pred_result)
cbind(pred_result,y)
rbind(pred_result,y)
raw %>%
select(pclass, survived) %>%
summarise()
raw %>%
select(pclass, survived) %>%
group_by(pclass) %>%
summarise()
raw %>%
select(pclass, survived) %>%
mutate(sum = sum(survived))%>%
group_by(pclass) %>%
summarise()
raw %>%
+ select(pclass, survived) %>%
+ group_by(pclass) %>%
+ mutate(sum = sum(survived))%>%
+ summarise()
raw %>% select(pclass, survived) %>% group_by(pclass) %>% mutate(sum = sum(survived))%>% summarise()
summary(raw)
x
raw <- read.csv(file.choose())
View(raw)
a
is.na(raw$boat)
length(raw$boat)
is.null(raw$boat)
length(raw$boat[1:13])
length(raw$boat[1:13,])
length(raw$boat[])
summary(raw$boat)
raw$boat
levels(raw$boat)
as.factor(raw$boat)
summary(as.factor(raw$boat))
a <- raw %>%
filter(boat !="") %>%
group_by(survived)
a
View(a)
summary(a)
a <- raw %>%
filter(boat !="" & survived == 0) %>%
group_by(survived)
a
View(a)
b <- raw[-1000:1310,]
b <- raw[-c(1000:1310),]
b
View(b)
b <- raw[-c(1001:1310),]
View(b)
b <- raw[-c(1002:1310),]
View(b)
b <- raw[-c(1001:1310),]
View(b)
a <- b %>%
filter(boat !="" & survived == 0) %>%
group_by(survived)
View(a)
aa <- b %>%
filter(boat == "" & survived != 0) %>%
group_by(survived)
View(aa)
View(rbind(a,aa))
false <- rbind(a,aa)
view(false)
View(false)
file.choose()
summary
summary(b)
names(b)
model <- svm(survived ~ sex + boat, data = b)
pred_result <- predict(model,b)
table(pred_result, b$survived)
View(pred_result)
model
x <- subset(b, select = -survived)
model <- svm(survived ~ sex + boat, data = b)
pred_result <- predict(model,x)
pred_result
class(b$survived)
b$survived <- as.factor(b$survived)
model <- svm(survived ~ sex + boat, data = b)
pred_result <- predict(model,x)
pred_result
View(pred_result)
table(pred_result, b$survived)
class(b$boat)
class(b$sex)
model <- svm(survived ~ boat, data = b)
y <- b$boat
model <- svm(survived ~ boat, data = b)
pred_result <- predict(model, x)
table(pred_result, y)
pred_result
model <- svm(survived ~ sex, data = b)
pred_result <- predict(model, x)
table(pred_result, y)
pred_result <- predict(model, x)
pred_result
model <- svm(survived ~ ., data = b)
model <- svm(survived ~ sex + boat, data = b)
model
View(x)
for(i in 1:length(b$boat)){
if (b$boat[i] == "") {
b$boat[i] == "NA"
}
}
View(b)
View(b)
b$boat[3]
b$boat
b$boat[3]
b$boat[[3]]
b$boat[1]
b$boat[3]
b$boat[2]
b$boat[i] == "FUCK"
for(i in 1:length(b$boat)){
if (b$boat[i] == "") {
b$boat[i] == "FUCK"
}
}
View(b)
b$boat <- as.character(b$boat)
for(i in 1:length(b$boat)){
if (b$boat[i] == "") {
b$boat[i] == "FUCK"
}
}
View(b)
if (b$boat[i] == " ") {
b$boat[i] == "FUCK"
}
for(i in 1:length(b$boat)){
if (b$boat[i] == " ") {
b$boat[i] == "FUCK"
}
}
length(b$boat)
for(i in 1:length(b$boat)){
if (b$boat[i] == b$boat[3]) {
b$boat[i] == "FUCK"
}
}
for(i in 1:length(b$boat)){
if (b$boat[i] == b$boat[3]) {
b$boat[i] = "FUCK"
}
}
View(b)
for(i in 1:length(b$boat)){
if (b$boat[i] == "") {
b$boat[i] = "FUCK"
}
}
View(b)
false <- rbind(a,aa)
x <- subset(b, select = -survived)
y <- b$boat
model <- svm(survived ~ sex + boat, data = b)
pred_result <- predict(model, x)
class(b$boat)
b$boat <- as.factor(b$boat)
x <- subset(b, select = -survived)
y <- b$boat
model <- svm(survived ~ sex + boat, data = b)
pred_result <- predict(model, x)
table(pred_result, y)
pred_result
model <- svm(survived ~ boat, data = b)
pred_result <- predict(model, x)
pred_result
x <- subset(iris, select = -Species)
y <- iris$Species
model <- svm(Species ~ ., data = iris)
pred_result <- predict(model, x)
pred_result
table(pred_result, y)
class(b[names(b),])
class(b0
)
class(b)
names(b)
summary(b)
a <- b %>%
filter(boat !="FUCK" & survived == 0) %>%
group_by(survived)
aa <- b %>%
filter(boat == "FUCK" & survived != 0) %>%
group_by(survived)
for(i in 1:length(b$boat)){
if (b$boat[i] == "") {
b$boat[i] = "FUCK"
}
}
false <- rbind(a,aa)
View(false)
x
x <- subset(b, select = -survived)
x
y <- b$boat
y
model <- svm(survived ~ boat + sex, data = b)
model
b[1]
b[,1]
b[1,]
b
class(b)
data.frame(b$survived,b$sex,b$boat)
c <- data.frame(b$survived,b$sex,b$boat)
c
x <- subset(c, select = -survived)
c
c <- data.frame(survived = b$survived,sex = b$sex,boat = b$boat)
c
x <- subset(c, select = -survived)
y <- b$boat
model <- svm(survived ~ boat + sex, data = c)
pred_result <- predict(model, x)
table(pred_result, y)
View(table(pred_result, y))
y <- b$survived
model <- svm(survived ~ boat + sex, data = c)
pred_result <- predict(model, x)
table(pred_result, y)
pred_result
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred <- b[i]
}
}
false.pred <- NULL
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred <- b[i]
}
}
false.pred
n <- 1
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred[n] <- b[i]
n = n + 1
}
}
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred[n] <- b[i,]
n = n + 1
}
}
View(false.pred)
n <- 1
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred[n] <- b[,i]
n = n + 1
}
}
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred[,n] <- b[,i]
n = n + 1
}
}
false.pred <- NULL
n <- 1
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
false.pred[,n] <- b[,i]
n = n + 1
}
}
false.pred
b[,1]
b[2,]
for(i in 1:length(pred_result)){
if(pred_result[i] != y[i]){
rbind(false.pred,b[i,])
}
}
false.pred
pred
pred_result == y
b[pred_result!=y,]
View(b[pred_result!=y,])
pred_result
b[b$boat == "A",]
table(pred_result, y)
x <- subset(c, select = -survived)
y <- b$survived
model <- svm(survived ~ boat, data = c)
pred_result <- predict(model, x)
table(pred_result, y)
model
model <- svm(survived ~ boat + sex, data = c)
model
hist(b$sibsp ~ b$survived)
plot(b$sibsp ~ b$survived)
plot(b$sibsp,b$survived)
mean(b$age[b$sex == "female",])
b$age[b$sex == "female",]
b$age[1,]
b$age[b$sex == "female"]
b$age[b$sex == "female" & b$age != NA]
b$age[b$sex == "female" && b$age != NA]
b$age[b$sex == "female" & b$age != NA]
b$age[b$sex == "female" & b$age != ""]
b$age[b$sex == "female" & b$age != "NA"]
b$age[b$sex == "female" & b$age == NA]
b$age[b$sex == "female"]
is.na(b$age[b$sex == "female"])
b$age[is.na(b$age[b$sex == "female"])]
b$age[is.null(b$age[b$sex == "female"])]
b$age[is.na(b$age[b$sex == "female"])]
c
c <- cbind(survived = b$survived, sex = b$sex, boat = b$boat)
c
b$sex
c <- rbind(survived = b$survived, sex = b$sex, boat = b$boat)
c
c <- data.frame(survived = b$survived, sex = b$sex, boat = b$boat)
c
x <- subset(c, select = -survived)
y <- b$survived
model <- svm(survived ~ boat + sex, data = c)
pred_result <- predict(model, x)
table(pred_result, y)
